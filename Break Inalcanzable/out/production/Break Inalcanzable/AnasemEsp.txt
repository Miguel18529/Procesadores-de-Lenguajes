OBJETIVO: Realizar un analizador semántico que detecte cuando un break es inalcanzable.

DECISIÓN DE DISEÑO 1:  Almacenar en un almacen global un valor booleano que indica si se ha pasado o no por un BREAK.
                       Almacén: [cent1, cent2, cent3....]
                       El almacén funcionará a modo de pila (LIFO), los valores booleanos que se añaden al almacén son:
                        - VERDADERO: Se ha pasado por un BREAK.
                        - FALSO: No se ha pasado por un BREAK.

    1.1: Por cada instrucción de iteración y selección, se añade un valor booleano al almacén de la forma:
        1.1.1. Si el almacén está vacío, se añade un valor FALSO al almacén.
        1.1.2. Si el último elemento del almacén es FALSO, añadir FALSO al almacén.
        1.1.3. Si el último elemento del almacén es VERDADERO, añadir VERDADERO al almacén.

    1.2: Al encontrar un BREAK, se revisa el almacén para comprobar si es o no inalcanzable:
        1.2.1. Si el almacén está vacío, añadir VERDADERO al almacén.
        1.2.2. Si el último elemento del almacén es FALSO, cambiar su valor a VERDADERO.
        1.2.3. Si el último elemento del almacén es VERDADERO, imprimir ERROR por pantalla de que el BREAK es inalcanzable.

    1.3. Al finalizar una instrucción de iteración o de selección, se elimina el último elemento contenido en el almacén.

programa : instrucciones EOF ;

instrucciones : instruccion instrucciones
              | instruccion
              ;

instruccion : asignacion
            | iteracion
            | seleccion
            | ruptura
            ;

asignacion : IDENT ASIG expr PyC ;

iteracion : WHILE {regla 1.1} PA expr PC bloque {regla 1.3};

seleccion : IF {regla 1.1} PA expr PC bloque {regla 1.3};

ruptura : BREAK {regla 1.2} PyC ;

bloque : instruccion
 | LLA instrucciones LLC
 ;

expr : expr_suma
 ((MENOR|MAYOR|MENORIGUAL|MAYORIGUAL|IGUAL|DISTINTO) expr_suma)?
 ;

expr_suma : expr_mult ((MAS|MENOS) expr_mult)*
 ;

expr_mult : expr_base ((POR|DIV) expr_base)*
 ;

expr_base : NUMERO
 | IDENT
 | PA expr PC
 ;