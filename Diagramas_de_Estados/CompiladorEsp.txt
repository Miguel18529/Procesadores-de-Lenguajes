OBJETIVO: Crear un compilador/traductor de diagrama de estados a java.

DECISIÓN DE DISEÑO 1: Los estados se representan asignando las variables.
    ej: Estado1: a=1, b=2,...

DECISIÓN DE DISEÑO 2: Las transiciones entre estados se representan mediante bloques if.

DECISIÓN DE DISEÑO 3: Las condiciones de las transiciones son excluyentes.

DECISIÓN DE DISEÑO 4: El estado final se decide siguiendo un centinela con valor inicial a falso, que se hace verdadero al pasar por un estado final.

DECISIÓN DE DISEÑO 5: Memoria para almacenar la relación entre los estados y sus variables.
    ej: estado | asignaciones
        estado1| a=1, b=2..

DECSIÓN DE DISEÑO 6: Almacén para guardar las transiciones de la forma: estado incial, estado destino, condición.
    ej: e_inicial | e_destino | condición
        estado1   | estado2   | (x<y)

DECISIÓN DE DISEÑO 7: Almacén para guardar el estado de las variables a lo largo del tiempo, inicialmente, en la declaración el valor de cada variable será 0.
    ej: variable | valor
        x        | 1
        y        | 2

GRAMÁTICA ATRIBUIDA:

centinela_estado_final = falso (4)
inicializar almacen_estados = [] (5)
inicializar almacen_transiciones = [] (6)
inicializar almacen_variables = [] (7)

diagrama: {generar código de inicio de clase}
            {generar código de inicio de main}
            DIAGRAMA IDENT variables estados inicial transiciones
            EOF;

variables: VARIABLES vars {generar código de inicialización de variables};

vars: IDENT {almacenar IDENT con el valor 0 en el almacén_variables (7)} vars
 | IDENT {almacenar IDENT con el valor 0 en el almacén_variables (7)}
 ;

estados: ESTADOS (estado)* ;

estado: IDENT v:asignaciones {almacenar en almacen_estados IDENT:v (5)};

asignaciones dev v: v1:asignacion asignaciones {añadir v1 a v (5)}
 | v1:asignacion {añadir v1 a v (5)}
 ;

asignacion dev v: v1:IDENT ASIG v2:term PUNTOYCOMA añadir v1 y v2 a v;

inicial: INICIAL IDENT ;

transiciones: TRANSICIONES (transicion)* {generar código final de main}
                                         {generar código final de clase};

transicion: IDENT IDENT condicion PUNTOYCOMA ;

condicion: condicion Y condicion #condY
 | condicion O condicion #condO
 | NO condicion #condNo
 | PARENTESISABIERTO condicion PARENTESISCERRADO #condPar
 | term MAYOR term #condMayor
 | term MENOR term #condMenor
 | term IGUAL term #condIgual
 | term DISTINTO term #condDistinto
 | term MAYORIGUAL term #condMayorIgual
 | term MENORIGUAL term #condMenorIgual
 ;

term dev v: v:NUMERO
          | v:IDENT
          ;


generar código de inicio de clase:
    Escribir: "import java.IO.*;
               public class Ejemplo {"

generar código de inicio de main:
    Escribir: "public static void main(String args[]){"

generar código final de main:
    Escribir: "}"

generar código final de clase:
    Escribir: "}"

generar código de inicialización de variables:
    Escribir: "Integer" + nombre variables del almacén separadas por comas + ";"

generar código de estados:
    Escribir: